from flask import Blueprint, render_template, request, redirect, url_for, flash, send_file
from datetime import datetime
from io import BytesIO
from sqlalchemy.orm import joinedload
from extensions import db
from .models import PayerAllocation
from .forms import AllocationFilterForm, BulkAssignForm
from modules.reference.payers.models import Payer
from .services import sync_from_plans  # —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –ø–ª–∞–Ω—ñ–≤

bp = Blueprint(
    "payer_allocation",
    __name__,
    url_prefix="/purchases/payer-allocation",
    template_folder="templates",
)

@bp.route("/", methods=["GET"])
def index():
    form = AllocationFilterForm(request.args)
    bulk_form = BulkAssignForm()

    q = PayerAllocation.query.filter(PayerAllocation.status == "active")

    if form.company.data:
        q = q.filter(PayerAllocation.company_id == form.company.data.id)
    if form.product.data:
        q = q.filter(PayerAllocation.product_id == form.product.data.id)
    if form.manufacturer.data:
        q = q.filter(PayerAllocation.manufacturer_id == form.manufacturer.data.id)
    if form.payer.data:
        q = q.filter(PayerAllocation.payer_id == form.payer.data.id)

    q = q.order_by(
        PayerAllocation.company_id,
        PayerAllocation.field_id,
        PayerAllocation.product_id
    )

    rows = q.all()

    # –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –∞–≤—Ç–æ—Å–∏–Ω–∫: —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ ‚Äî –ø—ñ–¥—Ç—è–≥–Ω–µ–º–æ –∑ –ø–ª–∞–Ω—ñ–≤ –æ–¥–∏–Ω —Ä–∞–∑
    if not rows:
        stats = sync_from_plans()
        if stats["added"] or stats["updated"]:
            flash(
                f"–í–∏–∫–æ–Ω–∞–Ω–æ –ø–µ—Ä–≤–∏–Ω–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –∑ –ø–ª–∞–Ω—ñ–≤: –¥–æ–¥–∞–Ω–æ {stats['added']}, –∑–º—ñ–Ω–µ–Ω–æ {stats['updated']}.",
                "info"
            )
            return redirect(url_for("payer_allocation.index"))

    return render_template(
        "payer_allocation/index.html",
        form=form,
        bulk_form=bulk_form,
        rows=rows,
        title="–†–æ–∑–ø–æ–¥—ñ–ª –º—ñ–∂ –ü–ª–∞—Ç–Ω–∏–∫–∞–º–∏",
        header="üí≥ –†–æ–∑–ø–æ–¥—ñ–ª –º—ñ–∂ –ü–ª–∞—Ç–Ω–∏–∫–∞–º–∏",
    )

@bp.route("/sync", methods=["POST"])
def sync():
    """–†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–ª–∞–Ω—ñ–≤ (upsert –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è payer_id)."""
    stats = sync_from_plans()
    flash(
        f"–û–Ω–æ–≤–ª–µ–Ω–æ –∑ –ø–ª–∞–Ω—ñ–≤: –¥–æ–¥–∞–Ω–æ {stats['added']}, –∑–º—ñ–Ω–µ–Ω–æ {stats['updated']}, "
        f"–ø–æ–∑–Ω–∞—á–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º–∏ {stats['marked_stale']}. –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats['total_active']}.",
        "success"
    )
    return redirect(url_for("payer_allocation.index"))

@bp.route("/bulk-assign", methods=["POST"])
def bulk_assign():
    form = BulkAssignForm()
    ids_raw = request.form.get("ids", "").strip()
    if not ids_raw:
        flash("–ù–µ –æ–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞.", "warning")
        return redirect(url_for("payer_allocation.index"))

    try:
        ids = [int(x) for x in ids_raw.split(",") if x.strip().isdigit()]
    except Exception:
        ids = []

    if not ids:
        flash("–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—ñ–π.", "warning")
        return redirect(url_for("payer_allocation.index"))

    payer = form.payer.data
    if not payer:
        flash("–û–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç–Ω–∏–∫–∞.", "warning")
        return redirect(url_for("payer_allocation.index"))

    count = (
        PayerAllocation.query.filter(PayerAllocation.id.in_(ids))
        .update(
            {
                PayerAllocation.payer_id: payer.id,
                PayerAllocation.assigned_at: datetime.utcnow(),
            },
            synchronize_session=False,
        )
    )
    db.session.commit()
    flash(f"–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ø–ª–∞—Ç–Ω–∏–∫–∞ –¥–ª—è {count} —Ä—è–¥–∫—ñ–≤.", "success")
    return redirect(url_for("payer_allocation.index"))

@bp.route("/<int:row_id>/set-payer", methods=["POST"])
def set_payer(row_id):
    row = PayerAllocation.query.get_or_404(row_id)
    payer_id = request.form.get("payer_id")
    if payer_id is not None:
        if payer_id == "":  # –æ—á–∏—Å—Ç–∏—Ç–∏
            row.payer_id = None
            row.assigned_at = None
        else:
            payer = Payer.query.get(int(payer_id))
            if not payer:
                flash("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–ª–∞—Ç–Ω–∏–∫.", "warning")
                return redirect(url_for("payer_allocation.index"))
            row.payer_id = payer.id
            row.assigned_at = datetime.utcnow()
        db.session.commit()
        flash("–ó–º—ñ–Ω–µ–Ω–æ –ø–ª–∞—Ç–Ω–∏–∫–∞.", "success")
    else:
        flash("–ù–µ –æ–±—Ä–∞–Ω–æ –ø–ª–∞—Ç–Ω–∏–∫–∞.", "warning")
    return redirect(url_for("payer_allocation.index"))

@bp.route("/export_pdf", methods=["GET"])
def export_pdf():
    """
    –ï–∫—Å–ø–æ—Ä—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —É PDF.
    –û—á—ñ–∫—É—î —Ç—ñ —Å–∞–º—ñ query params, —â–æ –π index(): company, product, manufacturer, payer (ID).
    """
    # —Ñ—ñ–ª—å—Ç—Ä–∏ –∑ query string
    company_id = request.args.get("company", type=int)
    product_id = request.args.get("product", type=int)
    manufacturer_id = request.args.get("manufacturer", type=int)
    payer_id = request.args.get("payer", type=int)

    q = (
        PayerAllocation.query
        .filter(PayerAllocation.status == "active")
        .options(
            joinedload(PayerAllocation.company),
            joinedload(PayerAllocation.field),
            joinedload(PayerAllocation.product),
            joinedload(PayerAllocation.manufacturer),
            joinedload(PayerAllocation.unit),
            joinedload(PayerAllocation.payer),
        )
        .order_by(PayerAllocation.company_id, PayerAllocation.field_id, PayerAllocation.product_id)
    )

    if company_id:
        q = q.filter(PayerAllocation.company_id == company_id)
    if product_id:
        q = q.filter(PayerAllocation.product_id == product_id)
    if manufacturer_id:
        q = q.filter(PayerAllocation.manufacturer_id == manufacturer_id)
    if payer_id:
        q = q.filter(PayerAllocation.payer_id == payer_id)

    rows = q.all()

    # ==== PDF –ø–æ–±—É–¥–æ–≤–∞ (ReportLab) ====
    from reportlab.lib.pagesizes import A4
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib import colors
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    import os

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —à—Ä–∏—Ñ—Ç—É –¥–ª—è –∫–∏—Ä–∏–ª–∏—Ü—ñ
    font_path = os.path.join('static', 'fonts', 'DejaVuSans.ttf')
    if os.path.exists(font_path):
        pdfmetrics.registerFont(TTFont('DejaVu', font_path))
        title_style = ParagraphStyle(name='DejaVuTitle', fontName='DejaVu', fontSize=16, leading=20)
        cell_font = 'DejaVu'
    else:
        title_style = ParagraphStyle(name='BaseTitle', fontSize=16, leading=20)
        cell_font = 'Helvetica'

    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []

    elements.append(Paragraph("–†–æ–∑–ø–æ–¥—ñ–ª –º—ñ–∂ –ü–ª–∞—Ç–Ω–∏–∫–∞–º–∏ ‚Äî –µ–∫—Å–ø–æ—Ä—Ç", title_style))
    elements.append(Spacer(1, 10))

    # –¢–∞–±–ª–∏—Ü—è
    data = [["–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ", "–ü–æ–ª–µ", "–ü—Ä–æ–¥—É–∫—Ç", "–í–∏—Ä–æ–±–Ω–∏–∫", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–û–¥–∏–Ω–∏—Ü—è", "–ü–æ–∫—É–ø–µ—Ü—å"]]
    for r in rows:
        data.append([
            r.company.name if r.company else "‚Äî",
            r.field.name if r.field else "‚Äî",
            r.product.name if r.product else "‚Äî",
            r.manufacturer.name if r.manufacturer else "‚Äî",
            f"{r.qty}",
            r.unit.name if r.unit else "‚Äî",
            r.payer.name if r.payer else "‚Äî",
        ])

    table = Table(data, repeatRows=1)
    table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), cell_font),
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgreen),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('ALIGN', (4, 1), (4, -1), 'RIGHT'),  # qty –ø—Ä–∞–≤–æ—Ä—É—á
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
    ]))

    elements.append(table)
    doc.build(elements)
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="payer_allocation.pdf", mimetype="application/pdf")
