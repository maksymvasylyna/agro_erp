from flask import Blueprint, render_template, request, redirect, url_for, flash, send_file, current_app
from datetime import datetime
from io import BytesIO
import re
from sqlalchemy import func, distinct
from sqlalchemy.orm import joinedload, selectinload
from extensions import db
from .models import PayerAllocation
from .forms import AllocationFilterForm, BulkAssignForm
from modules.reference.payers.models import Payer
from modules.reference.fields.field_models import Field
from modules.reference.products.models import Product
from .services import sync_from_plans  # —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –ø–ª–∞–Ω—ñ–≤

bp = Blueprint(
    "payer_allocation",
    __name__,
    url_prefix="/purchases/payer-allocation",
    template_folder="templates",
)

# ----------------------- –•–ï–õ–ü–ï–†–ò -----------------------

def _pick_id(x):
    """–ü–æ–≤–µ—Ä—Ç–∞—î .id –¥–ª—è QuerySelectField –∞–±–æ —Å–∞–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è SelectField(coerce=int)."""
    return getattr(x, "id", x) if x else None

def _unit_text(u):
    return (
        getattr(u, "short_name", None)
        or getattr(u, "symbol", None)
        or getattr(u, "name", None)
        or ""
    )

# ----------------------- –û–°–ù–û–í–ù–Ü –†–û–£–¢–ò -----------------------

@bp.route("/", methods=["GET"])
def index():
    form = AllocationFilterForm(request.args)
    bulk_form = BulkAssignForm()

    company_id = _pick_id(form.company.data)
    product_id = _pick_id(form.product.data)
    manufacturer_id = _pick_id(form.manufacturer.data)
    payer_id = _pick_id(form.payer.data)

    q = (
        PayerAllocation.query
        .filter(PayerAllocation.status == "active")
        .options(
            selectinload(PayerAllocation.company),
            selectinload(PayerAllocation.field),
            selectinload(PayerAllocation.product),
            selectinload(PayerAllocation.manufacturer),
            selectinload(PayerAllocation.unit),
            selectinload(PayerAllocation.payer),
        )
        .order_by(
            PayerAllocation.company_id,
            PayerAllocation.field_id,
            PayerAllocation.product_id,
        )
    )

    if company_id:
        q = q.filter(PayerAllocation.company_id == company_id)
    if product_id:
        q = q.filter(PayerAllocation.product_id == product_id)
    if manufacturer_id:
        q = q.filter(PayerAllocation.manufacturer_id == manufacturer_id)
    if payer_id:
        q = q.filter(PayerAllocation.payer_id == payer_id)

    rows = q.all()

    # –ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∞–≤—Ç–æ—Å–∏–Ω–∫ –ª–∏—à–µ –∫–æ–ª–∏ –§–Ü–õ–¨–¢–†–ò –ù–ï –ó–ê–î–ê–ù–û, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–µ—Ç–ª—ñ —Ä–µ–¥—ñ—Ä–µ–∫—Ç—ñ–≤.
    if not rows and not any([company_id, product_id, manufacturer_id, payer_id]):
        stats = sync_from_plans()
        if stats.get("added") or stats.get("updated"):
            flash(
                f"–í–∏–∫–æ–Ω–∞–Ω–æ –ø–µ—Ä–≤–∏–Ω–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –∑ –ø–ª–∞–Ω—ñ–≤: –¥–æ–¥–∞–Ω–æ {stats.get('added', 0)}, –∑–º—ñ–Ω–µ–Ω–æ {stats.get('updated', 0)}.",
                "info",
            )
            return redirect(url_for("payer_allocation.index", **request.args))

    # –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤ –ø–ª–∞—Ç–Ω–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ
    payers = Payer.query.order_by(Payer.name).all()

    return render_template(
        "payer_allocation/index.html",
        form=form,
        bulk_form=bulk_form,
        rows=rows,
        payers=payers,
        title="–†–æ–∑–ø–æ–¥—ñ–ª –º—ñ–∂ –ü–ª–∞—Ç–Ω–∏–∫–∞–º–∏",
        header="üí≥ –†–æ–∑–ø–æ–¥—ñ–ª –º—ñ–∂ –ü–ª–∞—Ç–Ω–∏–∫–∞–º–∏",
    )

@bp.route("/sync", methods=["POST"])
def sync():
    """–†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–ª–∞–Ω—ñ–≤ (upsert –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è payer_id)."""
    stats = sync_from_plans()
    flash(
        f"–û–Ω–æ–≤–ª–µ–Ω–æ –∑ –ø–ª–∞–Ω—ñ–≤: –¥–æ–¥–∞–Ω–æ {stats.get('added', 0)}, –∑–º—ñ–Ω–µ–Ω–æ {stats.get('updated', 0)}, "
        f"–ø–æ–∑–Ω–∞—á–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º–∏ {stats.get('marked_stale', 0)}. –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats.get('total_active', 0)}.",
        "success",
    )
    return redirect(url_for("payer_allocation.index"))

@bp.route("/bulk-assign", methods=["POST"])
def bulk_assign():
    # –ü—Ä–∏–≤'—è–∑—É—î–º–æ —Ñ–æ—Ä–º—É –¥–æ POST-–¥–∞–Ω–∏—Ö
    form = BulkAssignForm(request.form)

    ids_raw = (request.form.get("ids") or "").strip()
    if not ids_raw:
        flash("–ù–µ –æ–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞.", "warning")
        return redirect(url_for("payer_allocation.index"))

    # –í–∏—Ç—è–≥–Ω–µ–º–æ –ª–∏—à–µ —á–∏—Å–ª–∞, —É–Ω—ñ–∫–∞–ª—ñ–∑—É—î–º–æ, –∑–±–µ—Ä–µ–∂–µ–º–æ –ø–æ—Ä—è–¥–æ–∫ –ø–æ—è–≤–∏
    ids_list = [int(x) for x in re.findall(r"\d+", ids_raw)]
    seen = set()
    ids = [x for x in ids_list if not (x in seen or seen.add(x))]

    if not ids:
        flash("–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—ñ–π.", "warning")
        return redirect(url_for("payer_allocation.index"))

    payer = form.payer.data  # QuerySelectField -> –æ–±'—î–∫—Ç; SelectField(coerce=int) -> int
    if not payer:
        flash("–û–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç–Ω–∏–∫–∞.", "warning")
        return redirect(url_for("payer_allocation.index"))

    payer_id = getattr(payer, "id", payer)

    count = (
        PayerAllocation.query.filter(PayerAllocation.id.in_(ids))
        .update(
            {
                PayerAllocation.payer_id: payer_id,
                PayerAllocation.assigned_at: datetime.utcnow(),
            },
            synchronize_session=False,
        )
    )
    db.session.commit()
    flash(f"–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ø–ª–∞—Ç–Ω–∏–∫–∞ –¥–ª—è {count} —Ä—è–¥–∫—ñ–≤.", "success")
    return redirect(url_for("payer_allocation.index"))

@bp.route("/<int:row_id>/set-payer", methods=["POST"])
def set_payer(row_id):
    row = PayerAllocation.query.get_or_404(row_id)
    raw_pid = request.form.get("payer_id")

    if raw_pid is None:
        flash("–ù–µ –æ–±—Ä–∞–Ω–æ –ø–ª–∞—Ç–Ω–∏–∫–∞.", "warning")
        return redirect(url_for("payer_allocation.index"))

    raw_pid = raw_pid.strip()
    if raw_pid == "":  # –æ—á–∏—Å—Ç–∏—Ç–∏
        row.payer_id = None
        row.assigned_at = None
        db.session.commit()
        flash("–ü–ª–∞—Ç–Ω–∏–∫–∞ –æ—á–∏—â–µ–Ω–æ.", "success")
        return redirect(url_for("payer_allocation.index"))

    try:
        pid = int(raw_pid)
    except ValueError:
        flash("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–ª–∞—Ç–Ω–∏–∫.", "warning")
        return redirect(url_for("payer_allocation.index"))

    payer = Payer.query.get(pid)
    if not payer:
        flash("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–ª–∞—Ç–Ω–∏–∫.", "warning")
        return redirect(url_for("payer_allocation.index"))

    row.payer_id = payer.id
    row.assigned_at = datetime.utcnow()
    db.session.commit()
    flash("–ó–º—ñ–Ω–µ–Ω–æ –ø–ª–∞—Ç–Ω–∏–∫–∞.", "success")
    return redirect(url_for("payer_allocation.index"))

@bp.route("/export_pdf", methods=["GET"])
def export_pdf():
    """
    –ï–∫—Å–ø–æ—Ä—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —É PDF.
    –û—á—ñ–∫—É—î —Ç—ñ —Å–∞–º—ñ query params, —â–æ –π index(): company, product, manufacturer, payer (ID).
    """
    # —Ñ—ñ–ª—å—Ç—Ä–∏ –∑ query string
    company_id = request.args.get("company", type=int)
    product_id = request.args.get("product", type=int)
    manufacturer_id = request.args.get("manufacturer", type=int)
    payer_id = request.args.get("payer", type=int)

    q = (
        PayerAllocation.query
        .filter(PayerAllocation.status == "active")
        .options(
            selectinload(PayerAllocation.company),
            selectinload(PayerAllocation.field),
            selectinload(PayerAllocation.product),
            selectinload(PayerAllocation.manufacturer),
            selectinload(PayerAllocation.unit),
            selectinload(PayerAllocation.payer),
        )
        .order_by(
            PayerAllocation.company_id,
            PayerAllocation.field_id,
            PayerAllocation.product_id
        )
    )

    if company_id:
        q = q.filter(PayerAllocation.company_id == company_id)
    if product_id:
        q = q.filter(PayerAllocation.product_id == product_id)
    if manufacturer_id:
        q = q.filter(PayerAllocation.manufacturer_id == manufacturer_id)
    if payer_id:
        q = q.filter(PayerAllocation.payer_id == payer_id)

    rows = q.all()

    # ==== PDF –ø–æ–±—É–¥–æ–≤–∞ (ReportLab) ====
    from reportlab.lib.pagesizes import A4
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import ParagraphStyle
    from reportlab.lib import colors
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    import os

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —à—Ä–∏—Ñ—Ç—É –¥–ª—è –∫–∏—Ä–∏–ª–∏—Ü—ñ
    font_path = os.path.join(current_app.root_path, 'static', 'fonts', 'DejaVuSans.ttf')
    if os.path.exists(font_path):
        pdfmetrics.registerFont(TTFont('DejaVu', font_path))
        title_style = ParagraphStyle(name='DejaVuTitle', fontName='DejaVu', fontSize=16, leading=20)
        cell_font = 'DejaVu'
    else:
        title_style = ParagraphStyle(name='BaseTitle', fontSize=16, leading=20)
        cell_font = 'Helvetica'

    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, title="Payer Allocation Export")
    elements = []

    subtitle = []
    if company_id:     subtitle.append(f"–ö–æ–º–ø–∞–Ω—ñ—è #{company_id}")
    if product_id:     subtitle.append(f"–ü—Ä–æ–¥—É–∫—Ç #{product_id}")
    if manufacturer_id:subtitle.append(f"–í–∏—Ä–æ–±–Ω–∏–∫ #{manufacturer_id}")
    if payer_id:       subtitle.append(f"–ü–ª–∞—Ç–Ω–∏–∫ #{payer_id}")
    sub = (" | ".join(subtitle)) if subtitle else "–£—Å—ñ –∑–∞–ø–∏—Å–∏"
    when = datetime.now().strftime("%Y-%m-%d %H:%M")

    elements.append(Paragraph("–†–æ–∑–ø–æ–¥—ñ–ª –º—ñ–∂ –ü–ª–∞—Ç–Ω–∏–∫–∞–º–∏ ‚Äî –µ–∫—Å–ø–æ—Ä—Ç", title_style))
    elements.append(Paragraph(f"<font size=9>{sub} ‚Ä¢ {when}</font>", ParagraphStyle(name='Sub', fontName=cell_font, fontSize=9, leading=12)))
    elements.append(Spacer(1, 10))

    data = [["–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ", "–ü–æ–ª–µ", "–ü—Ä–æ–¥—É–∫—Ç", "–í–∏—Ä–æ–±–Ω–∏–∫", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–û–¥–∏–Ω–∏—Ü—è", "–ü–æ–∫—É–ø–µ—Ü—å"]]
    for r in rows:
        company_name = r.company.name if r.company else "‚Äî"
        field_name   = r.field.name if r.field else "‚Äî"
        product_name = r.product.name if r.product else "‚Äî"
        manuf_name   = r.manufacturer.name if r.manufacturer else "‚Äî"
        qty_text     = f"{r.qty:.2f}" if getattr(r, "qty", None) is not None else "‚Äî"
        unit_text    = _unit_text(r.unit) if r.unit else "‚Äî"
        payer_name   = r.payer.name if r.payer else "‚Äî"

        data.append([company_name, field_name, product_name, manuf_name, qty_text, unit_text, payer_name])

    table = Table(data, repeatRows=1)
    table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), cell_font),
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgreen),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
        ('ALIGN', (4, 1), (4, -1), 'RIGHT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('LEFTPADDING', (0, 0), (-1, -1), 4),
        ('RIGHTPADDING', (0, 0), (-1, -1), 4),
        ('TOPPADDING', (0, 0), (-1, -1), 2),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 2),
    ]))

    elements.append(table)
    doc.build(elements)
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="payer_allocation.pdf", mimetype="application/pdf")

# ----------------------- –ê–£–î–ò–¢ -----------------------

@bp.route("/audit", methods=["GET"])
def audit():
    """
    –ê—É–¥–∏—Ç —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ–≤ –ø–ª–∞—Ç–Ω–∏–∫—ñ–≤:
    - —Ñ—ñ–ª—å—Ç—Ä–∏: field_id, payer_id
    - –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è (–ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ —Ä—ñ–∑–Ω–∏–º –ø–ª–∞—Ç–Ω–∏–∫–∞–º)
    - —Å–∏—Ä–æ—Ç–∏ (field_id IS NULL)
    - —Ä–µ—î—Å—Ç—Ä –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å
    - –∑–≤–µ–¥–µ–Ω–Ω—è (–∑–∞ –ø–ª–∞—Ç–Ω–∏–∫–æ–º —É –ø–æ–ª—ñ / –∑–∞ –ø–æ–ª–µ–º —É –ø–ª–∞—Ç–Ω–∏–∫–∞)
    """
    field_id = request.args.get("field_id", type=int)
    payer_id = request.args.get("payer_id", type=int)

    # —Å–µ–ª–µ–∫—Ç-–æ–ø—Ü—ñ—ó
    fields = Field.query.order_by(Field.name).all()
    payers = Payer.query.order_by(Payer.name).all()

    # –ë–∞–∑–æ–≤–∏–π —Ä–µ—î—Å—Ç—Ä –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å
    alloc_q = (
        db.session.query(
            PayerAllocation.id.label("pa_id"),
            Field.id.label("field_id"), Field.name.label("field_name"),
            Product.id.label("product_id"), Product.name.label("product_name"),
            Payer.id.label("payer_id"), Payer.name.label("payer_name"),
        )
        .outerjoin(Field, Field.id == PayerAllocation.field_id)
        .join(Product, Product.id == PayerAllocation.product_id)
        .join(Payer, Payer.id == PayerAllocation.payer_id)
    )
    if field_id:
        alloc_q = alloc_q.filter(PayerAllocation.field_id == field_id)
    if payer_id:
        alloc_q = alloc_q.filter(PayerAllocation.payer_id == payer_id)

    allocations = alloc_q.order_by(
        func.coalesce(Field.name, func.cast(PayerAllocation.field_id, db.Integer)).asc(),
        Product.name.asc(),
        Payer.name.asc()
    ).all()

    # –ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ (–ª–∏—à–µ —è–∫—â–æ –æ–±—Ä–∞–Ω–æ –ø–æ–ª–µ)
    conflicts = []
    if field_id:
        conflict_heads = (
            db.session.query(
                Product.id.label("product_id"),
                Product.name.label("product_name"),
                func.count(distinct(PayerAllocation.payer_id)).label("payers_cnt"),
            )
            .join(Product, Product.id == PayerAllocation.product_id)
            .filter(PayerAllocation.field_id == field_id)
            .group_by(Product.id, Product.name)
            .having(func.count(distinct(PayerAllocation.payer_id)) > 1)
            .order_by(Product.name.asc())
            .all()
        )
        for row in conflict_heads:
            payer_names = (
                db.session.query(Payer.name)
                .join(Payer, Payer.id == PayerAllocation.payer_id)
                .filter(
                    PayerAllocation.field_id == field_id,
                    PayerAllocation.product_id == row.product_id
                )
                .distinct()
                .order_by(Payer.name.asc())
                .all()
            )
            conflicts.append({
                "product_id": row.product_id,
                "product_name": row.product_name,
                "payers_cnt": int(row.payers_cnt),
                "payers": [n for (n,) in payer_names],
            })

    # ¬´–°–∏—Ä–æ—Ç–∏¬ª (—Ä—è–¥–∫–∏ –±–µ–∑ –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –ø–æ–ª—è) ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ, —è–∫—â–æ –Ω–µ –æ–±—Ä–∞–Ω–æ field_id
    orphans = []
    if not field_id:
        orphans = (
            db.session.query(
                PayerAllocation.id.label("pa_id"),
                Product.name.label("product_name"),
                Payer.name.label("payer_name"),
            )
            .join(Product, Product.id == PayerAllocation.product_id)
            .join(Payer, Payer.id == PayerAllocation.payer_id)
            .filter(PayerAllocation.field_id.is_(None))
            .order_by(PayerAllocation.id.desc())
            .limit(200)
            .all()
        )

    # –ó–≤–µ–¥–µ–Ω–Ω—è
    summary_by_payer = []
    if field_id:
        summary_by_payer = (
            db.session.query(
                Payer.name.label("payer_name"),
                func.count().label("allocs"),
                func.count(distinct(PayerAllocation.product_id)).label("products_cnt"),
            )
            .join(Payer, Payer.id == PayerAllocation.payer_id)
            .filter(PayerAllocation.field_id == field_id)
            .group_by(Payer.name)
            .order_by(Payer.name.asc())
            .all()
        )

    summary_by_field = []
    if payer_id:
        summary_by_field = (
            db.session.query(
                Field.name.label("field_name"),
                func.count().label("allocs"),
                func.count(distinct(PayerAllocation.product_id)).label("products_cnt"),
            )
            .join(Field, Field.id == PayerAllocation.field_id)
            .filter(PayerAllocation.payer_id == payer_id)
            .group_by(Field.name)
            .order_by(Field.name.asc())
            .all()
        )

    return render_template(
        "payer_allocation/audit.html",
        fields=fields,
        payers=payers,
        field_id=field_id,
        payer_id=payer_id,
        allocations=allocations,
        conflicts=conflicts,
        orphans=orphans,
        summary_by_payer=summary_by_payer,
        summary_by_field=summary_by_field,
    )
@bp.post("/audit/clear")
def audit_clear():
    """
    –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∞—É–¥–∏—Ç—É.
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
      action = 'delete' | 'unassign'   (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'delete')
      scope  = 'filtered' | 'orphans' | 'all'  (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'filtered')
      field_id, payer_id ‚Äî –¥–ª—è scope='filtered'
    """
    action   = (request.form.get("action") or "delete").strip().lower()
    scope    = (request.form.get("scope")  or "filtered").strip().lower()
    field_id = request.form.get("field_id", type=int)
    payer_id = request.form.get("payer_id", type=int)

    # –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç
    q = PayerAllocation.query

    if scope == "orphans":
        q = q.filter(PayerAllocation.field_id.is_(None))
        scope_text = "—Å–∏—Ä–æ—Ç–∏ (–±–µ–∑ –ø–æ–ª—è)"
    elif scope == "all":
        scope_text = "—É—Å—ñ –∑–∞–ø–∏—Å–∏"
    else:  # 'filtered'
        if not field_id and not payer_id:
            flash("–©–æ–± –æ—á–∏—Å—Ç–∏—Ç–∏ –∑–∞ —Ñ—ñ–ª—å—Ç—Ä–æ–º, –æ–±–µ—Ä—ñ—Ç—å –ü–æ–ª–µ –∞–±–æ –ü–ª–∞—Ç–Ω–∏–∫–∞, –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å —Ä–µ–∂–∏–º –Ω–∞ ¬´–°–∏—Ä–æ—Ç–∏¬ª / ¬´–í—Å–µ¬ª.", "warning")
            return redirect(url_for("payer_allocation.audit"))
        if field_id:
            q = q.filter(PayerAllocation.field_id == field_id)
        if payer_id:
            q = q.filter(PayerAllocation.payer_id == payer_id)
        scope_text = "–ø–æ—Ç–æ—á–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä"

    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó
    if action == "unassign":
        # –∑–Ω—è—Ç–∏ –ø–ª–∞—Ç–Ω–∏–∫–∞, –∑–∞–ª–∏—à–∏—Ç–∏ —Ä—è–¥–∫–∏
        updated = q.update(
            {PayerAllocation.payer_id: None, PayerAllocation.assigned_at: None},
            synchronize_session=False,
        )
        db.session.commit()
        flash(f"–ó–Ω—è—Ç–æ –ø–ª–∞—Ç–Ω–∏–∫–∞ —É {updated} —Ä—è–¥–∫–∞—Ö ({scope_text}).", "success")
    else:
        # —Ñ—ñ–∑–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
        deleted = q.delete(synchronize_session=False)
        db.session.commit()
        flash(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted} —Ä—è–¥–∫—ñ–≤ ({scope_text}).", "success")

    # –ù–∞–∑–∞–¥ –Ω–∞ –∞—É–¥–∏—Ç –∑ —Ç–∏–º–∏ —Å–∞–º–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
    return redirect(url_for("payer_allocation.audit", field_id=field_id, payer_id=payer_id))
