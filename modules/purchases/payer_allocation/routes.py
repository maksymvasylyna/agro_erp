# modules/purchases/payer_allocation/routes.py
from flask import Blueprint, render_template, request, redirect, url_for, flash
from datetime import datetime
from extensions import db
from .models import PayerAllocation
from .forms import AllocationFilterForm, BulkAssignForm
from modules.reference.payers.models import Payer
from .services import sync_from_plans  # üëà –¥–æ–¥–∞–Ω–æ

bp = Blueprint(
    "payer_allocation",
    __name__,
    url_prefix="/purchases/payer-allocation",
    template_folder="templates",
)

@bp.route("/", methods=["GET"])
def index():
    form = AllocationFilterForm(request.args)
    bulk_form = BulkAssignForm()

    q = PayerAllocation.query.filter(PayerAllocation.status == "active")

    if form.company.data:
        q = q.filter(PayerAllocation.company_id == form.company.data.id)
    if form.product.data:
        q = q.filter(PayerAllocation.product_id == form.product.data.id)
    if form.manufacturer.data:
        q = q.filter(PayerAllocation.manufacturer_id == form.manufacturer.data.id)
    if form.payer.data:
        q = q.filter(PayerAllocation.payer_id == form.payer.data.id)

    q = q.order_by(
        PayerAllocation.company_id,
        PayerAllocation.field_id,
        PayerAllocation.product_id
    )

    rows = q.all()

    # üîÑ –ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∞–≤—Ç–æ—Å–∏–Ω–∫: —è–∫—â–æ –ø—É—Å—Ç–æ ‚Äî –ø—ñ–¥—Ç—è–≥—É—î–º–æ –∑ –ø–ª–∞–Ω—ñ–≤ –æ–¥–∏–Ω —Ä–∞–∑
    if not rows:
        stats = sync_from_plans()
        # –Ø–∫—â–æ —â–æ—Å—å –ø—ñ–¥—Ç—è–≥–Ω—É–ª–∏ ‚Äî –ø–æ–∫–∞–∂–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        if stats["added"] or stats["updated"]:
            flash(
                f"–í–∏–∫–æ–Ω–∞–Ω–æ –ø–µ—Ä–≤–∏–Ω–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –∑ –ø–ª–∞–Ω—ñ–≤: –¥–æ–¥–∞–Ω–æ {stats['added']}, –∑–º—ñ–Ω–µ–Ω–æ {stats['updated']}.",
                "info"
            )
            return redirect(url_for("payer_allocation.index"))

    return render_template(
        "payer_allocation/index.html",
        form=form,
        bulk_form=bulk_form,
        rows=rows,
        title="–†–æ–∑–ø–æ–¥—ñ–ª –º—ñ–∂ –ü–ª–∞—Ç–Ω–∏–∫–∞–º–∏",
        header="üí≥ –†–æ–∑–ø–æ–¥—ñ–ª –º—ñ–∂ –ü–ª–∞—Ç–Ω–∏–∫–∞–º–∏",
    )

@bp.route("/sync", methods=["POST"])
def sync():
    """–†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–ª–∞–Ω—ñ–≤ (upsert –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è payer_id)."""
    stats = sync_from_plans()
    flash(
        f"–û–Ω–æ–≤–ª–µ–Ω–æ –∑ –ø–ª–∞–Ω—ñ–≤: –¥–æ–¥–∞–Ω–æ {stats['added']}, –∑–º—ñ–Ω–µ–Ω–æ {stats['updated']}, "
        f"–ø–æ–∑–Ω–∞—á–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º–∏ {stats['marked_stale']}. –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats['total_active']}.",
        "success"
    )
    return redirect(url_for("payer_allocation.index"))

@bp.route("/bulk-assign", methods=["POST"])
def bulk_assign():
    form = BulkAssignForm()
    ids_raw = request.form.get("ids", "").strip()
    if not ids_raw:
        flash("–ù–µ –æ–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞.", "warning")
        return redirect(url_for("payer_allocation.index"))

    try:
        ids = [int(x) for x in ids_raw.split(",") if x.strip().isdigit()]
    except Exception:
        ids = []

    if not ids:
        flash("–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—ñ–π.", "warning")
        return redirect(url_for("payer_allocation.index"))

    payer = form.payer.data
    if not payer:
        flash("–û–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç–Ω–∏–∫–∞.", "warning")
        return redirect(url_for("payer_allocation.index"))

    count = (
        PayerAllocation.query.filter(PayerAllocation.id.in_(ids))
        .update(
            {
                PayerAllocation.payer_id: payer.id,
                PayerAllocation.assigned_at: datetime.utcnow(),
            },
            synchronize_session=False,
        )
    )
    db.session.commit()
    flash(f"–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ø–ª–∞—Ç–Ω–∏–∫–∞ –¥–ª—è {count} —Ä—è–¥–∫—ñ–≤.", "success")
    return redirect(url_for("payer_allocation.index"))

@bp.route("/<int:row_id>/set-payer", methods=["POST"])
def set_payer(row_id):
    row = PayerAllocation.query.get_or_404(row_id)
    payer_id = request.form.get("payer_id")
    if payer_id is not None:
        if payer_id == "":  # –æ—á–∏—Å—Ç–∏—Ç–∏
            row.payer_id = None
            row.assigned_at = None
        else:
            payer = Payer.query.get(int(payer_id))
            if not payer:
                flash("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–ª–∞—Ç–Ω–∏–∫.", "warning")
                return redirect(url_for("payer_allocation.index"))
            row.payer_id = payer.id
            row.assigned_at = datetime.utcnow()
        db.session.commit()
        flash("–ó–º—ñ–Ω–µ–Ω–æ –ø–ª–∞—Ç–Ω–∏–∫–∞.", "success")
    else:
        flash("–ù–µ –æ–±—Ä–∞–Ω–æ –ø–ª–∞—Ç–Ω–∏–∫–∞.", "warning")
    return redirect(url_for("payer_allocation.index"))
