# modules/purchases/needs/routes.py
from flask import Blueprint, render_template, request, redirect, url_for, flash, send_file
from io import BytesIO
from sqlalchemy.orm import joinedload
from extensions import db
import re
import math

# –ó–≤–µ–¥–µ–Ω–Ω—è (—Å—Ç–∞—Ä–µ) –∑–∞–ª–∏—à–∞—î–º–æ –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–∏–º –¥–ª—è —ñ–Ω—à–∏—Ö –µ–∫—Ä–∞–Ω—ñ–≤
from modules.purchases.needs.services import get_summary

# –î–æ–≤—ñ–¥–Ω–∏–∫–∏
from modules.reference.products.models import Product
from modules.reference.cultures.models import Culture
from modules.reference.companies.models import Company
from modules.reference.units.models import Unit
from modules.reference.manufacturers.models import Manufacturer
from modules.reference.payers.models import Payer

# –ü—Ä–æ–ø–ª–∞—Ç–∏
from modules.purchases.payments.models import PaymentInbox

# –†–æ–∑–ø–æ–¥—ñ–ª –º—ñ–∂ –ø–ª–∞—Ç–Ω–∏–∫–∞–º–∏ (–ù–û–í–ï –¥–∂–µ—Ä–µ–ª–æ –¥–ª—è –∑–∞—è–≤–∫–∏)
from modules.purchases.payer_allocation.models import PayerAllocation
from modules.purchases.payer_allocation.services import (
    get_consolidated_with_remaining,  # (company, product, payer, manufacturer, unit) + qty_remaining
    get_already_ordered_map,          # (company, product, payer) -> already
    reconcile_allocations_against_plans,  # –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ "—Ö–≤–æ—Å—Ç—ñ–≤"
)

needs_bp = Blueprint(
    "needs",
    __name__,
    url_prefix="/purchases/needs",
    template_folder="templates",
)

# --- –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ —Ç–∞—Ä–∏ ---
_pkg_number_re = re.compile(r"(\d+[\.,]?\d*)")

def _parse_package_value(text: str | None) -> float | None:
    if not text:
        return None
    m = _pkg_number_re.search(str(text))
    if not m:
        return None
    try:
        return float(m.group(1).replace(",", "."))
    except Exception:
        return None

def _round_up_to_package(qty: float | int | None, package_value: float | None) -> float:
    try:
        q = float(qty or 0.0)
    except Exception:
        q = 0.0
    if not package_value or package_value <= 0:
        return q
    packs = math.ceil(q / float(package_value))
    return packs * float(package_value)


# ---- helpers ----
def _attach_labels(rows):
    """
    rows: —Å–ø–∏—Å–æ–∫ dict —ñ–∑ –∫–ª—é—á–∞–º–∏ company_id, product_id, manufacturer_id, unit_id
    –î–æ–¥–∞—î company_name, product_name, manufacturer_name, unit_name.
    """
    if not rows:
        return rows

    company_ids = {r.get("company_id") for r in rows if r.get("company_id")}
    product_ids = {r.get("product_id") for r in rows if r.get("product_id")}
    manufacturer_ids = {r.get("manufacturer_id") for r in rows if r.get("manufacturer_id")}
    unit_ids = {r.get("unit_id") for r in rows if r.get("unit_id")}

    companies = Company.query.filter(Company.id.in_(company_ids)).all() if company_ids else []
    products  = Product.query.filter(Product.id.in_(product_ids)).all() if product_ids else []
    mans      = Manufacturer.query.filter(Manufacturer.id.in_(manufacturer_ids)).all() if manufacturer_ids else []
    units     = Unit.query.filter(Unit.id.in_(unit_ids)).all() if unit_ids else []

    cmap = {c.id: c.name for c in companies}
    pmap = {p.id: p.name for p in products}
    mmap = {m.id: m.name for m in mans}
    umap = {u.id: u.name for u in units}

    for r in rows:
        r["company_name"]      = r.get("company_name")      or cmap.get(r.get("company_id"), "‚Äî")
        r["product_name"]      = r.get("product_name")      or pmap.get(r.get("product_id"), "‚Äî")
        r["manufacturer_name"] = r.get("manufacturer_name") or mmap.get(r.get("manufacturer_id"), "‚Äî")
        r["unit_name"]         = r.get("unit_name")         or umap.get(r.get("unit_id"), "‚Äî")
    return rows


def _product_package(prod: Product | None) -> str | None:
    """
    –¢–∞—Ä–∞ –±–µ—Ä–µ—Ç—å—Å—è –∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ –ü—Ä–æ–¥—É–∫—Ç–∏. –ü—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø–æ–ª—ñ–≤/–∑–≤'—è–∑–∫—ñ–≤.
    """
    if not prod:
        return None
    for attr in ("container", "package", "packaging", "package_name", "pack", "pack_name", "package_size", "pack_size", "tare", "tare_name"):
        val = getattr(prod, attr, None)
        if val:
            return str(val)
    rel = getattr(prod, "package", None)
    name = getattr(rel, "name", None) if rel is not None else None
    return str(name) if name else None


def _safe_int(x, default=None):
    try:
        return int(x)
    except Exception:
        return default


def _attach_manufacturer_from_product(rows):
    """
    –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ rows (dict) –≥–∞—Ä–∞–Ω—Ç—É—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å:
      row["manufacturer_id"], row["manufacturer_name"]
    –î–∞–Ω—ñ –±–µ—Ä—É—Ç—å—Å—è –∑ Product.manufacturer_id ‚Üí Manufacturer.name.
    """
    if not rows:
        return rows

    prod_ids = {r["product_id"] for r in rows if r.get("product_id")}
    if not prod_ids:
        return rows

    # product_id -> manufacturer_id
    products = Product.query.with_entities(Product.id, Product.manufacturer_id)\
                            .filter(Product.id.in_(prod_ids)).all()
    mid_map = {p.id: p.manufacturer_id for p in products if p}

    mids = {mid_map.get(r["product_id"]) for r in rows if mid_map.get(r["product_id"]) }
    mans = Manufacturer.query.with_entities(Manufacturer.id, Manufacturer.name)\
                             .filter(Manufacturer.id.in_(mids)).all() if mids else []
    mname = {m.id: m.name for m in mans}

    for r in rows:
        pid = r.get("product_id")
        mid = mid_map.get(pid)
        r["manufacturer_id"] = r.get("manufacturer_id") or mid
        r["manufacturer_name"] = r.get("manufacturer_name") or (mname.get(mid) if mid else None) or "‚Äî"
    return rows


def _no_cache(resp):
    resp.headers["Cache-Control"] = "no-store, no-cache, must-revalidate, max-age=0"
    resp.headers["Pragma"] = "no-cache"
    return resp


@needs_bp.route("/", methods=["GET"], endpoint="summary")
def summary():
    """
    –°—Ç–∞—Ä–∏–π –µ–∫—Ä–∞–Ω "–ó–≤–µ–¥–µ–Ω–∞ –ø–æ—Ç—Ä–µ–±–∞" (–¥–ª—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ).
    """
    company_id = request.args.get("company_id", type=int)
    culture_id = request.args.get("culture_id", type=int)
    product_id = request.args.get("product_id", type=int)

    data = get_summary(company_id=company_id, culture_id=culture_id, product_id=product_id)
    return render_template(
        "needs/summary.html",
        data=data,
        companies=Company.query.order_by(Company.name.asc()).all(),
        cultures=Culture.query.order_by(Culture.name.asc()).all(),
        products=Product.query.order_by(Product.name.asc()).all(),
        company_id=company_id, culture_id=culture_id, product_id=product_id,
        title="–ó–≤–µ–¥–µ–Ω–∞ –ø–æ—Ç—Ä–µ–±–∞",
        header="üìä –ó–≤–µ–¥–µ–Ω–∞ –ø–æ—Ç—Ä–µ–±–∞",
    )


@needs_bp.route("/sync", methods=["POST"], endpoint="summary_sync")
def summary_sync():
    """
    –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó payer_allocations —ñ–∑ –ø–ª–∞–Ω—ñ–≤.
    """
    try:
        reconcile_allocations_against_plans()
        flash("–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ (–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å–∏ –ø—ñ–∑–Ω—ñ—à–µ).", "success")
    except Exception as e:
        flash(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}", "danger")
    return redirect(url_for("needs.summary"))


@needs_bp.route("/export/pdf", methods=["GET"], endpoint="summary_export_pdf")
def summary_export_pdf():
    """
    –ï–∫—Å–ø–æ—Ä—Ç PDF –¥–ª—è –∑–≤–µ–¥–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∞—î–º–æ —è–∫ –±—É–ª–æ).
    """
    company_id = request.args.get("company_id", type=int)
    culture_id = request.args.get("culture_id", type=int)
    product_id = request.args.get("product_id", type=int)

    data = get_summary(company_id=company_id, culture_id=culture_id, product_id=product_id)

    # ==== PDF (ReportLab) ====
    from reportlab.lib.pagesizes import A4
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import ParagraphStyle
    from reportlab.lib import colors
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    import os

    font_path = os.path.join('static', 'fonts', 'DejaVuSans.ttf')
    if os.path.exists(font_path):
        pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))

    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)

    style_title = ParagraphStyle(name='Title', fontName='DejaVuSans', fontSize=14, leading=16, spaceAfter=12)
    style_cell  = ParagraphStyle(name='Cell',  fontName='DejaVuSans', fontSize=9,  leading=11)

    table_data = [["–ö–æ–º–ø–∞–Ω—ñ—è", "–ö—É–ª—å—Ç—É—Ä–∞", "–ü—Ä–æ–¥—É–∫—Ç", "–í–∏—Ä–æ–±–Ω–∏–∫", "–û–¥.", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å"]]
    for row in data:
        table_data.append([
            Paragraph(row.get("company_name") or "‚Äî", style_cell),
            Paragraph(row.get("culture_name") or "‚Äî", style_cell),
            Paragraph(row.get("product_name") or "‚Äî", style_cell),
            Paragraph(row.get("manufacturer_name") or "‚Äî", style_cell),
            Paragraph(row.get("unit_name") or "‚Äî", style_cell),
            Paragraph(f'{float(row.get("qty") or 0.0):.3f}', style_cell),
        ])

    table = Table(table_data, repeatRows=1)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
        ('GRID', (0,0), (-1,-1), 0.25, colors.grey),
        ('ALIGN', (5,1), (5,-1), 'RIGHT'),
    ]))

    elements = [Paragraph("–ó–≤–µ–¥–µ–Ω–∞ –ø–æ—Ç—Ä–µ–±–∞", style_title), Spacer(1, 6), table]
    doc.build(elements)

    buffer.seek(0)
    return send_file(buffer, as_attachment=True, mimetype='application/pdf',
                     download_name='summary.pdf')


@needs_bp.route("/request", methods=["GET"], endpoint="request_form")
def request_form():
    """
    –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏: —Ç–µ–ø–µ—Ä —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –æ–¥—Ä–∞–∑—É.
    –§—ñ–ª—å—Ç—Ä–∏ (company_id / product_id / payer_id) ‚Äî –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ.
    –í–∏–±—ñ—Ä –ø–æ–∑–∏—Ü—ñ–π/—Å–∞–±–º—ñ—Ç –¥–æ–∑–≤–æ–ª—è—î–º–æ –ª–∏—à–µ –∫–æ–ª–∏ –∑–∞–¥–∞–Ω–æ company_id.
    """
    company_id = request.args.get("company_id", type=int)
    product_id = request.args.get("product_id", type=int)
    payer_id   = request.args.get("payer_id", type=int)

    # ‚îÄ‚îÄ –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ ¬´—Ö–≤–æ—Å—Ç—ñ–≤¬ª –ø–µ—Ä–µ–¥ –ø–æ–±—É–¥–æ–≤–æ—é —Å–ø–∏—Å–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    try:
        reconcile_allocations_against_plans(
            company_id=company_id,
            product_ids=[product_id] if product_id else None,
        )
    except Exception:
        # –Ω–µ –≤–∞–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É, —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫
        pass
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    companies = Company.query.order_by(Company.name.asc()).all()
    products  = Product.query.order_by(Product.name.asc()).all()
    payers    = Payer.query.order_by(Payer.name.asc()).all()

    # –¢—è–≥–Ω–µ–º–æ –∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—é –Ω–∞–≤—ñ—Ç—å –±–µ–∑ company_id (–ø–æ–∫–∞–∂–µ –≤—Å—ñ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞)
    base = get_consolidated_with_remaining(
        company_id=company_id,
        product_id=product_id,
        payer_id=payer_id,
    )

    rows = []
    for r in base:
        pkg_val = _parse_package_value(r.get("package"))
        avail_raw = float(r.get("qty_remaining") or 0.0)
        avail = _round_up_to_package(avail_raw, pkg_val)
        rows.append({
            "company_id": r["company_id"],
            "company_name": r.get("company_name"),
            "product_id": r["product_id"],
            "product_name": r.get("product_name"),
            "manufacturer_id": r.get("manufacturer_id"),
            "manufacturer_name": r.get("manufacturer_name"),
            "unit_id": r.get("unit_id"),
            "unit_name": r.get("unit_name"),
            "package": r.get("package"),
            "payer_id": r.get("payer_id"),
            "payer_name": r.get("payer_name"),
            "available": avail,  # –û–ö–†–£–ì–õ–ï–ù–û –î–û –¢–ê–†–ò
        })

    # –î–æ–±–∏–≤–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ —è—Ä–ª–∏–∫–∏/–≤–∏—Ä–æ–±–Ω–∏–∫–∞ –∑ –ø—Ä–æ–¥—É–∫—Ç—É
    rows = _attach_manufacturer_from_product(rows)
    rows = _attach_labels(rows)

    selection_enabled = bool(company_id)

    return render_template(
        "needs/request_form.html",
        companies=companies,
        products=products,
        payers=payers,
        company_id=company_id,
        product_id=product_id,
        payer_id=payer_id,
        rows=rows,
        selection_enabled=selection_enabled,
        title="–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫—É–ø—ñ–≤–ª—é",
        header="üßæ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫—É–ø—ñ–≤–ª—é (–∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è –∑ —Ä–æ–∑–ø–æ–¥—ñ–ª—É)",
    )


@needs_bp.route("/request/preview", methods=["POST"], endpoint="request_preview")
def request_preview():
    """
    –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –¥–ª—è –∑–∞—è–≤–∫–∏ –∑ –∫–æ–Ω—Å–æ–ª—ñ–¥–æ–≤–∞–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É.
    –û—á—ñ–∫—É—î—Ç—å—Å—è, —â–æ —Ñ–æ—Ä–º–∞ –Ω–∞–¥—Å–∏–ª–∞—î:
      - —á–µ–∫–±–æ–∫—Å–∏ name="selected" value="{product_id}::{payer_id}"
      - —ñ–Ω–ø—É—Ç–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ name="qty_{product_id}_{payer_id}"
    –í–∏—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —è–∫ —Å—Ç–∞—Ç–∏—á–Ω–∏–π —Ç–µ–∫—Å—Ç —ñ –±–µ—Ä–µ—Ç—å—Å—è –∑ Product.
    """
    company_id = request.form.get("company_id", type=int)
    product_id = request.form.get("product_id", type=int)
    payer_id   = request.form.get("payer_id", type=int)

    if not company_id:
        flash("–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ (—Å–ø–æ–∂–∏–≤–∞—á–∞).", "warning")
        return redirect(url_for("needs.request_form"))

    # —Ä–æ–∑–ø–∞—Ä—Å–∏–º–æ –≤–∏–±—ñ—Ä–∫–∏ –∑ —á–µ–∫–±–æ–∫—Å—ñ–≤
    selected = request.form.getlist("selected")
    pairs = []
    for s in selected:
        try:
            pid_str, pay_str = s.split("::", 1)
            pid = int(pid_str)
            pay = int(pay_str) if pay_str not in (None, "", "None", "0") else None
            pairs.append((pid, pay))
        except Exception:
            continue

    # –∑–Ω—ñ–º–µ–º–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑ —Ñ–æ—Ä–º–∏
    qty_map = {}
    for pid, pay in pairs:
        q = request.form.get(f"qty_{pid}_{pay or 0}", type=float)
        qty_map[(pid, pay)] = float(q or 0.0)

    base = get_consolidated_with_remaining(
        company_id=company_id,
        product_id=product_id,
        payer_id=payer_id,
    )
    idx = {(r["product_id"], r["payer_id"]): r for r in base}

    chosen = []
    for pid, pay in pairs:
        qty = float(qty_map.get((pid, pay), 0.0) or 0.0)
        row = idx.get((pid, pay))
        product = Product.query.get(pid)

        if not row:
            # fallback: —è–∫—â–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—è –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            mid = product.manufacturer_id if product else None
            mobj = Manufacturer.query.get(mid) if mid else None
            mname = mobj.name if mobj else "‚Äî"
            chosen.append({
                "product_id": pid,
                "product_name": product.name if product else f"#{pid}",
                "payer_id": pay,
                "payer_name": None,
                "company_id": company_id,
                "company_name": Company.query.get(company_id).name if company_id else None,
                "package": _product_package(product),
                "manufacturer_id": mid,
                "manufacturer_name": mname,
                "requested_qty": qty,
                "available_qty": 0.0,
            })
            continue

        pkg_val = _parse_package_value(row.get("package"))
        available = _round_up_to_package(float(row.get("qty_remaining") or row.get("available") or 0.0), pkg_val)
        eff_qty   = min(qty, available)  # –Ω–µ –±—ñ–ª—å—à–µ –æ–∫—Ä—É–≥–ª–µ–Ω–æ–≥–æ –∑–∞–ª–∏—à–∫—É

        # –≤–∏—Ä–æ–±–Ω–∏–∫ —Ç—ñ–ª—å–∫–∏ –∑ –ø—Ä–æ–¥—É–∫—Ç—É (—Å—Ç–∞–ª–µ –∑–Ω–∞—á–µ–Ω–Ω—è)
        mid = product.manufacturer_id if product else None
        mobj = Manufacturer.query.get(mid) if mid else None
        mname = mobj.name if mobj else "‚Äî"

        chosen.append({
            "product_id": pid,
            "product_name": row.get("product_name") or (product.name if product else f"#{pid}"),
            "payer_id": pay,
            "payer_name": row.get("payer_name"),
            "company_id": company_id,
            "company_name": row.get("company_name"),
            "package": row.get("package") or _product_package(product),
            "manufacturer_id": mid,
            "manufacturer_name": mname,
            "requested_qty": eff_qty,
            "available_qty": available,
        })

    company = Company.query.get(company_id) if company_id else None

    # –í–ê–ñ–õ–ò–í–û: –Ω–µ –ø–µ—Ä–µ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ manufacturers —É —à–∞–±–ª–æ–Ω ‚Äî UI –º–∞—î –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–∏–π —Ç–µ–∫—Å—Ç
    return render_template(
        "needs/request_preview.html",
        company=company,
        items=chosen,
        title="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞—è–≤–∫–∏",
        header="üîç –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞—è–≤–∫–∏",
    )


@needs_bp.route("/request/submit", methods=["POST"], endpoint="request_submit")
def request_submit():
    """
    –°–∞–±–º—ñ—Ç –∑–∞—è–≤–∫–∏ –∑ –∫–æ–Ω—Å–æ–ª—ñ–¥–æ–≤–∞–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É.
    –û—á—ñ–∫—É—î –º–∞—Å–∏–≤–∏:
      item_product_id[], item_payer_id[], item_qty[]
    –£–í–ê–ì–ê: manufacturer_id —Ñ–æ—Ä—Å—É—î—Ç—å—Å—è –∑ Product —ñ –ù–ï –±–µ—Ä–µ—Ç—å—Å—è –∑ —Ñ–æ—Ä–º–∏.
    –¢–∞—Ä–∞ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑ –ø—Ä–æ–¥—É–∫—Ç—É. –ü—ñ—Å–ª—è —Å–∞–±–º—ñ—Ç—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ —Ñ–æ—Ä–º—É.
    """
    company_id = request.form.get("company_id", type=int)
    if not company_id:
        flash("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ (—Å–ø–æ–∂–∏–≤–∞—á–∞).", "warning")
        return redirect(url_for("needs.request_form"))

    product_ids = request.form.getlist("item_product_id[]")
    payer_ids   = request.form.getlist("item_payer_id[]")
    qtys        = request.form.getlist("item_qty[]")

    if not product_ids:
        flash("–ù–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.", "warning")
        return redirect(url_for("needs.request_form", company_id=company_id or ""))

    # –ü–æ–±—É–¥—É—î–º–æ –º–∞–ø–∏ –¥–ª—è –∞–Ω—Ç–∏–¥—É–±–ª—é–≤–∞–Ω–Ω—è –π –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞ –∑–∞–ª–∏—à–∫–æ–º
    totals_rows = get_consolidated_with_remaining(company_id=company_id)
    total_map = { (r["product_id"], r["payer_id"]): float(r.get("qty_total") or r.get("total_qty") or 0.0)
                  for r in totals_rows }

    already_map = get_already_ordered_map(company_id=company_id)  # –æ—á—ñ–∫—É—î—Ç—å—Å—è –∫–ª—é—á (company, product, payer)

    # –ë–∞–∑–æ–≤–∏–π –∑–∞–ª–∏—à–æ–∫ (–ø–ª–∞–Ω–∏ - —É–∂–µ –∑–∞–º–æ–≤–ª–µ–Ω–æ - —Å–∫–ª–∞–¥) –ø–æ (product_id, payer_id)
    remaining_rows = get_consolidated_with_remaining(company_id=company_id)
    remaining_map = { (r["product_id"], r["payer_id"]): float(r.get("qty_remaining") or 0.0)
                      for r in remaining_rows }

    # –ü–∞–∫–µ—Ç–Ω–µ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —ñ –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤
    pids = { _safe_int(x) for x in product_ids if _safe_int(x) is not None }
    products = { p.id: p for p in (Product.query.filter(Product.id.in_(pids)).all() if pids else []) }
    man_ids = { p.manufacturer_id for p in products.values() if p and p.manufacturer_id }
    manmap = { m.id: m for m in (Manufacturer.query.filter(Manufacturer.id.in_(man_ids)).all() if man_ids else []) }

    items = []
    used_map = {}  # –ª–æ–∫–∞–ª—å–Ω–æ –¥–æ–¥–∞–Ω–µ —É —Ü—å–æ–º—É —Å–∞–±–º—ñ—Ç—ñ: (pid, pay) -> added_qty

    n = len(product_ids)
    for i in range(n):
        pid = _safe_int(product_ids[i])
        pay = _safe_int(payer_ids[i])
        try:
            qty = float(qtys[i] or 0)
        except Exception:
            qty = 0.0

        if not pid or qty <= 0:
            continue

        product = products.get(pid)
        package = _product_package(product)

        # –º–µ–∂–∞: (–ø–ª–∞–Ω - —É–∂–µ –∑–∞–º–æ–≤–ª–µ–Ω–æ - —Å–∫–ª–∞–¥) - –ª–æ–∫–∞–ª—å–Ω–æ –¥–æ–¥–∞–Ω–µ —É —Ü—å–æ–º—É —Å–∞–±–º—ñ—Ç—ñ
        base_remaining = remaining_map.get((pid, pay), max(total_map.get((pid, pay), 0.0) - already_map.get((company_id, pid, pay), 0.0), 0.0))
        added     = used_map.get((pid, pay), 0.0)
        remaining = max(base_remaining - added, 0.0)

        # –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ —Ç–∞—Ä–∏
        pkg_val_loop = _parse_package_value(package)
        remaining_rounded = _round_up_to_package(remaining, pkg_val_loop)

        eff_qty = min(qty, remaining_rounded)
        if eff_qty <= 0:
            continue

        # –í–ò–†–û–ë–ù–ò–ö: —Ç—ñ–ª—å–∫–∏ –∑ –ø—Ä–æ–¥—É–∫—Ç—É (—Ñ–æ—Ä—Å—É—î–º–æ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ñ–æ—Ä–º–∏)
        mid = product.manufacturer_id if product else None
        m   = manmap.get(mid) if mid else None

        # —ñ–º'—è –ø–ª–∞—Ç–Ω–∏–∫–∞ (–¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
        payer_name = None
        if pay:
            payer = Payer.query.get(pay)
            payer_name = payer.name if payer else None

        items.append({
            "product_id": pid,
            "product_name": product.name if product else f"#{pid}",
            "qty": eff_qty,
            "package": package,
            "manufacturer_id": mid,
            "manufacturer_name": (m.name if m else None) or "‚Äî",
            "unit": getattr(product, "unit", None).name if product and getattr(product, "unit", None) else None,
            "payer_id": pay,
            "payer_name": payer_name,
            "company_id": company_id,
            "company_name": Company.query.get(company_id).name if company_id else None,
            "payer_id": pay,
            "payer_name": payer_name,
        })

        used_map[(pid, pay)] = added + eff_qty

    if not items:
        flash("–ù—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ/–∑–∞–ª–∏—à–æ–∫.", "warning")
        return redirect(url_for("needs.request_form", company_id=company_id or ""))

    inbox = PaymentInbox(
        company_id=company_id,
        status="submitted",
        items_json=items,
    )
    db.session.add(inbox)
    db.session.commit()

    flash("–ó–∞—è–≤–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ¬´–ü—Ä–æ–ø–ª–∞—Ç–∏¬ª. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ –¥–æ —Ñ–æ—Ä–º–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.", "success")
    return redirect(url_for("needs.request_form", company_id=company_id or ""))
